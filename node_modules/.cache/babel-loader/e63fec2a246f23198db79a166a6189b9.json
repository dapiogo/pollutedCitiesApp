{"ast":null,"code":"import _slicedToArray from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dawidgola/Desktop/pollutedCitiesApp/src/components/App/App.js\";\nimport React, { Component } from \"react\";\nimport Autocomplete from \"../AutocompleteInput/Autocomplete\";\nimport Header from \"../Header/Header\";\nimport List from \"../List/List\";\nimport Loader from \"../Loader/Loader\";\nimport { countries } from \"../../assets/dataCountry/dataCountry\";\nimport { getAllPollutedCities } from \"../../assets/api/api\";\nimport styled from \"../App/app.module.scss\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      value: \"\",\n      dataCity: [],\n      isLoading: false\n    };\n\n    _this.onChangeAutocomplete = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: _this.filteredSuggestions(value),\n        showSuggestions: true,\n        value: value\n      });\n    };\n\n    _this.onClickAutocomplete = function (e) {\n      var value = e.target.innerText;\n\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: _this.filteredSuggestions(value),\n        showSuggestions: false,\n        value: e.target.innerText\n      });\n    };\n\n    _this.onKeyDownAutocomplete = function (e) {\n      var _this$state = _this.state,\n          activeSuggestion = _this$state.activeSuggestion,\n          filteredSuggestions = _this$state.filteredSuggestions;\n      var keyCode = e.keyCode;\n\n      if (keyCode === 13 || keyCode === 38 || keyCode === 40) {\n        if (filteredSuggestions.length) {\n          _this.setState({\n            activeSuggestion: 0,\n            showSuggestions: false,\n            value: filteredSuggestions[activeSuggestion].country\n          });\n        }\n      }\n    };\n\n    _this.onSubmitAutocomplete = function (e) {\n      e.preventDefault();\n      var _this$state2 = _this.state,\n          activeSuggestion = _this$state2.activeSuggestion,\n          filteredSuggestions = _this$state2.filteredSuggestions;\n\n      if (filteredSuggestions.length) {\n        _this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          value: filteredSuggestions[activeSuggestion].country,\n          isLoading: true\n        });\n\n        var _filteredSuggestions = _slicedToArray(filteredSuggestions, 1),\n            code = _filteredSuggestions[0].code;\n\n        _this.dataPollutedCities(code);\n      }\n    };\n\n    _this.filteredSuggestions = function (value) {\n      var regex = new RegExp(\"^\".concat(value), \"i\");\n      return countries.filter(function (_ref) {\n        var country = _ref.country;\n        return country.match(regex);\n      });\n    };\n\n    _this.dataPollutedCities = function (query) {\n      return getAllPollutedCities(query).then(function (data) {\n        return setTimeout(function () {\n          _this.setState({\n            dataCity: data,\n            isLoading: false\n          });\n        }, 1000);\n      }).catch(function () {\n        return _this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var onChangeAutocomplete = this.onChangeAutocomplete,\n          onClickAutocomplete = this.onClickAutocomplete,\n          onKeyDownAutocomplete = this.onKeyDownAutocomplete,\n          onSubmitAutocomplete = this.onSubmitAutocomplete,\n          state = this.state;\n      var dataCity = state.dataCity,\n          isLoading = state.isLoading;\n      return React.createElement(\"div\", {\n        className: styled.wrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(Autocomplete, {\n        onChange: onChangeAutocomplete,\n        onClick: onClickAutocomplete,\n        onKeyDown: onKeyDownAutocomplete,\n        onSubmit: onSubmitAutocomplete,\n        data: state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), isLoading ? React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }) : React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/dawidgola/Desktop/pollutedCitiesApp/src/components/App/App.js"],"names":["React","Component","Autocomplete","Header","List","Loader","countries","getAllPollutedCities","styled","App","state","activeSuggestion","filteredSuggestions","showSuggestions","value","dataCity","isLoading","onChangeAutocomplete","e","target","setState","onClickAutocomplete","innerText","onKeyDownAutocomplete","keyCode","length","country","onSubmitAutocomplete","preventDefault","code","dataPollutedCities","regex","RegExp","filter","match","query","then","data","setTimeout","catch","wrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Autocomplete from \"../AutocompleteInput/Autocomplete\";\r\nimport Header from \"../Header/Header\";\r\nimport List from \"../List/List\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport { countries } from \"../../assets/dataCountry/dataCountry\";\r\nimport { getAllPollutedCities } from \"../../assets/api/api\";\r\nimport styled from \"../App/app.module.scss\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    activeSuggestion: 0,\r\n    filteredSuggestions: [],\r\n    showSuggestions: false,\r\n    value: \"\",\r\n    dataCity:[],\r\n    isLoading: false,\r\n  };\r\n\r\n  onChangeAutocomplete = e => {\r\n    const { value } = e.target;\r\n\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions: this.filteredSuggestions(value),\r\n      showSuggestions: true,\r\n      value\r\n    });\r\n  };\r\n\r\n  onClickAutocomplete = e => {\r\n    const value = e.target.innerText;\r\n\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions: this.filteredSuggestions(value),\r\n      showSuggestions: false,\r\n      value: e.target.innerText\r\n    });\r\n  };\r\n\r\n  onKeyDownAutocomplete = e => {\r\n    const { activeSuggestion, filteredSuggestions } = this.state;\r\n    const { keyCode } = e;\r\n\r\n    if (keyCode === 13 || keyCode === 38 || keyCode === 40) {\r\n      if (filteredSuggestions.length) {\r\n        this.setState({\r\n          activeSuggestion: 0,\r\n          showSuggestions: false,\r\n          value: filteredSuggestions[activeSuggestion].country\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  onSubmitAutocomplete = (e) => {\r\n    e.preventDefault();\r\n    const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n    if (filteredSuggestions.length) {\r\n      this.setState({\r\n        activeSuggestion: 0,\r\n        showSuggestions: false,\r\n        value: filteredSuggestions[activeSuggestion].country,\r\n        isLoading: true\r\n      });\r\n\r\n      const [{ code }] = filteredSuggestions;\r\n      this.dataPollutedCities(code);\r\n    } \r\n  }\r\n\r\n  filteredSuggestions = value => {\r\n    const regex = new RegExp(`^${value}`, \"i\");\r\n    return countries.filter(({ country }) => country.match(regex));\r\n  };\r\n\r\n  dataPollutedCities = query => {\r\n    return getAllPollutedCities(query)\r\n      .then(data => \r\n        setTimeout(() => {\r\n          this.setState({\r\n            dataCity: data,\r\n            isLoading: false\r\n          })\r\n        },1000)\r\n      ).catch(() => this.setState({ isLoading: false }));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChangeAutocomplete,\r\n      onClickAutocomplete,\r\n      onKeyDownAutocomplete,\r\n      onSubmitAutocomplete,\r\n      state\r\n    } = this;\r\n    const { dataCity, isLoading } = state;\r\n    return (\r\n      <div className={styled.wrapper}>\r\n        <Header/>\r\n        <Autocomplete\r\n          onChange={onChangeAutocomplete}\r\n          onClick={onClickAutocomplete}\r\n          onKeyDown={onKeyDownAutocomplete}\r\n          onSubmit={onSubmitAutocomplete}\r\n          data={state}\r\n        />\r\n        {isLoading ? <List /> : <Loader/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}