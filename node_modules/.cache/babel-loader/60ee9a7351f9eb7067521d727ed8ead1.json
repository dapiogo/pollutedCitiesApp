{"ast":null,"code":"export var filteredSuggestions = function filteredSuggestions(value, countries) {\n  var regex = new RegExp(\"^\".concat(value), \"i\");\n  var e = countries.find(function (_ref) {\n    var country = _ref.country;\n    return country.match(regex);\n  });\n  console.log(e);\n  return e;\n};\nexport var removeDuplicateValues = function removeDuplicateValues(elements) {\n  return elements.filter(function (item, index, array) {\n    return index === array.findIndex(function (element) {\n      return element.city === item.city;\n    });\n  }).slice(0, 10);\n};\nexport var getFullDate = new Date().toISOString().slice(0, 10);","map":{"version":3,"sources":["/Users/dawidgola/Desktop/pollutedCitiesApp/src/assets/helpers/helper.js"],"names":["filteredSuggestions","value","countries","regex","RegExp","e","find","country","match","console","log","removeDuplicateValues","elements","filter","item","index","array","findIndex","element","city","slice","getFullDate","Date","toISOString"],"mappings":"AAAA,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAQC,SAAR,EAAsB;AACrD,MAAMC,KAAK,GAAG,IAAIC,MAAJ,YAAeH,KAAf,GAAwB,GAAxB,CAAd;AACA,MAAMI,CAAC,GAAGH,SAAS,CAACI,IAAV,CAAe;AAAA,QAAGC,OAAH,QAAGA,OAAH;AAAA,WAAiBA,OAAO,CAACC,KAAR,CAAcL,KAAd,CAAjB;AAAA,GAAf,CAAV;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYL,CAAZ;AACA,SAAOA,CAAP;AACH,CALM;AAOP,OAAO,IAAMM,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,QAAQ;AAAA,SAAIA,QAAQ,CAACC,MAAT,CAAgB,UAAEC,IAAF,EAAQC,KAAR,EAAeC,KAAf;AAAA,WAA0BD,KAAK,KAAKC,KAAK,CAACC,SAAN,CAAgB,UAAEC,OAAF;AAAA,aAAgBA,OAAO,CAACC,IAAR,KAAiBL,IAAI,CAACK,IAAtC;AAAA,KAAhB,CAApC;AAAA,GAAhB,EAAiHC,KAAjH,CAAuH,CAAvH,EAAyH,EAAzH,CAAJ;AAAA,CAAtC;AAEP,OAAO,IAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,WAAX,GAAyBH,KAAzB,CAA+B,CAA/B,EAAkC,EAAlC,CAApB","sourcesContent":["export const filteredSuggestions = (value, countries) => {\n    const regex = new RegExp(`^${value}`, \"i\");\n    const e = countries.find(({ country }) => country.match(regex));\n    console.log(e);\n    return e;\n};\n\nexport const removeDuplicateValues = elements => elements.filter(( item, index, array ) => index === array.findIndex(( element ) =>  element.city === item.city)).slice(0,10);\n\nexport const getFullDate = new Date().toISOString().slice(0, 10);\n\n"]},"metadata":{},"sourceType":"module"}