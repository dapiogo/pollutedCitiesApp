{"ast":null,"code":"import _slicedToArray from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dawidgola/Desktop/pollutedCitiesApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dawidgola/Desktop/pollutedCitiesApp/src/components/App/App.js\";\nimport React, { Component } from \"react\";\nimport Autocomplete from \"../AutocompleteInput/Autocomplete\";\nimport Header from \"../Header/Header\";\nimport List from \"../List/List\";\nimport Loader from \"../Loader/Loader\";\nimport { countries } from \"../../assets/dataCountry/dataCountry\";\nimport { getAllPollutedCities } from \"../../assets/api/api\";\nimport { filteredSuggestions as filterSugest, getFullDate as fullDate, removeDuplicateValues } from \"../../assets/helpers/helper\";\nimport styled from \"../App/app.module.scss\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      filteredSuggestions: [],\n      showSuggestions: false,\n      value: localStorage.getItem('value') || '',\n      dataCity: [],\n      isLoading: false\n    };\n\n    _this.onChangeAutocomplete = function (e) {\n      var value = e.target.value;\n      var checkValue = value.length;\n\n      _this.setState({\n        filteredSuggestions: checkValue === 0 ? [] : filterSugest(value, countries),\n        showSuggestions: checkValue === 0 ? false : true,\n        dataCity: [],\n        isLoading: false,\n        value: value\n      });\n\n      localStorage.setItem('value', value.charAt(0).toUpperCase() + value.slice(1));\n    };\n\n    _this.onClickAutocomplete = function (e) {\n      var value = e.target.innerText;\n\n      _this.setState({\n        filteredSuggestions: filterSugest(value, countries),\n        showSuggestions: false,\n        value: value\n      });\n    };\n\n    _this.onKeyDownAutocomplete = function (e) {\n      var filteredSuggestions = _this.state.filteredSuggestions;\n      var keyCode = e.keyCode;\n\n      if (keyCode === 13 || keyCode === 38 || keyCode === 40) {\n        if (filteredSuggestions.length) {\n          _this.setState({\n            showSuggestions: false,\n            value: filteredSuggestions[0].country\n          });\n        }\n      }\n    };\n\n    _this.onSubmitAutocomplete = function (e) {\n      e.preventDefault();\n      console.log(e.target.value);\n      var filteredSuggestions = _this.state.filteredSuggestions;\n      var valueLocalStorage = localStorage.getItem('value');\n      var lengthFilteredSuggestions = filteredSuggestions.length;\n\n      if (lengthFilteredSuggestions || localStorage.length) {\n        _this.setState({\n          showSuggestions: false,\n          value: lengthFilteredSuggestions ? filteredSuggestions[0].country : valueLocalStorage,\n          isLoading: true\n        });\n\n        if (filterSugest(valueLocalStorage, countries).length && lengthFilteredSuggestions) {\n          var _ref = lengthFilteredSuggestions ? filteredSuggestions : filterSugest(valueLocalStorage, countries),\n              _ref2 = _slicedToArray(_ref, 1),\n              code = _ref2[0].code;\n\n          _this.dataPollutedCities(code);\n\n          _this.setState({\n            isLoading: false\n          });\n        } //  const [{ code }] = lengthFilteredSuggestions ? filteredSuggestions : filterSugest(valueLocalStorage, countries)\n        // const code = filterSugest(valueLocalStorage, countries);\n        //  console.log(code);\n        //  console.log(code.length);\n        // //  if(Boolean(code)) {\n        //   this.dataPollutedCities(code);\n        //  }\n\n      }\n    };\n\n    _this.dataPollutedCities = function (query) {\n      return getAllPollutedCities(query, fullDate).then(function (_ref3) {\n        var results = _ref3.results;\n\n        _this.setState({\n          dataCity: removeDuplicateValues(results),\n          isLoading: false\n        });\n      }).catch(function () {\n        return _this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var onChangeAutocomplete = this.onChangeAutocomplete,\n          onClickAutocomplete = this.onClickAutocomplete,\n          onKeyDownAutocomplete = this.onKeyDownAutocomplete,\n          onSubmitAutocomplete = this.onSubmitAutocomplete,\n          state = this.state;\n      var dataCity = state.dataCity,\n          isLoading = state.isLoading;\n      return React.createElement(\"div\", {\n        className: styled.wrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Autocomplete, {\n        onChange: onChangeAutocomplete,\n        onClick: onClickAutocomplete,\n        onKeyDown: onKeyDownAutocomplete,\n        onSubmit: onSubmitAutocomplete,\n        data: state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), isLoading ? React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }) : dataCity.length ? React.createElement(List, {\n        cities: dataCity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }) : null);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/dawidgola/Desktop/pollutedCitiesApp/src/components/App/App.js"],"names":["React","Component","Autocomplete","Header","List","Loader","countries","getAllPollutedCities","filteredSuggestions","filterSugest","getFullDate","fullDate","removeDuplicateValues","styled","App","state","showSuggestions","value","localStorage","getItem","dataCity","isLoading","onChangeAutocomplete","e","target","checkValue","length","setState","setItem","charAt","toUpperCase","slice","onClickAutocomplete","innerText","onKeyDownAutocomplete","keyCode","country","onSubmitAutocomplete","preventDefault","console","log","valueLocalStorage","lengthFilteredSuggestions","code","dataPollutedCities","query","then","results","catch","wrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Autocomplete from \"../AutocompleteInput/Autocomplete\";\r\nimport Header from \"../Header/Header\";\r\nimport List from \"../List/List\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport { countries } from \"../../assets/dataCountry/dataCountry\";\r\nimport { getAllPollutedCities } from \"../../assets/api/api\";\r\nimport { filteredSuggestions as filterSugest, getFullDate as fullDate, removeDuplicateValues } from \"../../assets/helpers/helper\";\r\nimport styled from \"../App/app.module.scss\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    filteredSuggestions: [],\r\n    showSuggestions: false,\r\n    value: localStorage.getItem('value') || '',\r\n    dataCity:[],\r\n    isLoading: false,\r\n  };\r\n\r\n  onChangeAutocomplete = e => {\r\n    const { value } = e.target;\r\n    const checkValue = value.length;\r\n\r\n    this.setState({\r\n      filteredSuggestions: checkValue === 0 ? [] : filterSugest(value, countries),\r\n      showSuggestions: checkValue === 0 ?  false : true,\r\n      dataCity: [],\r\n      isLoading: false,\r\n      value\r\n    });\r\n\r\n    localStorage.setItem('value', value.charAt(0).toUpperCase() + value.slice(1));\r\n  };\r\n\r\n  onClickAutocomplete = e => {\r\n    const value = e.target.innerText;\r\n\r\n    this.setState({\r\n      filteredSuggestions: filterSugest(value, countries),\r\n      showSuggestions: false,\r\n      value\r\n    });\r\n  };\r\n\r\n  onKeyDownAutocomplete = e => {\r\n    const { filteredSuggestions } = this.state;\r\n    const { keyCode } = e;\r\n\r\n    if (keyCode === 13 || keyCode === 38 || keyCode === 40) {\r\n      if (filteredSuggestions.length) {\r\n        this.setState({\r\n          showSuggestions: false,\r\n          value: filteredSuggestions[0].country\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  onSubmitAutocomplete = e => {\r\n\r\n    e.preventDefault();\r\n    console.log(e.target.value)\r\n\r\n    const { filteredSuggestions } = this.state;\r\n    const valueLocalStorage = localStorage.getItem('value');\r\n    const lengthFilteredSuggestions = filteredSuggestions.length;\r\n\r\n\r\n    if(lengthFilteredSuggestions || localStorage.length) {\r\n      this.setState({\r\n        showSuggestions: false,\r\n        value: lengthFilteredSuggestions ? filteredSuggestions[0].country : valueLocalStorage,\r\n        isLoading: true\r\n      });  \r\n      if(filterSugest(valueLocalStorage, countries).length && lengthFilteredSuggestions) {\r\n        const [{ code }] = lengthFilteredSuggestions ? filteredSuggestions : filterSugest(valueLocalStorage, countries);\r\n        this.dataPollutedCities(code);\r\n        this.setState({ isLoading: false })\r\n      }\r\n\r\n    //  const [{ code }] = lengthFilteredSuggestions ? filteredSuggestions : filterSugest(valueLocalStorage, countries)\r\n    // const code = filterSugest(valueLocalStorage, countries);\r\n\r\n    //  console.log(code);\r\n    //  console.log(code.length);\r\n    // //  if(Boolean(code)) {\r\n    //   this.dataPollutedCities(code);\r\n    //  }\r\n    }\r\n  }\r\n\r\n  dataPollutedCities = query => {\r\n    return getAllPollutedCities(query, fullDate)\r\n      .then(({ results }) => {\r\n          this.setState({\r\n            dataCity: removeDuplicateValues(results),\r\n            isLoading: false\r\n          })\r\n      }).catch(() => this.setState({ isLoading: false }));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChangeAutocomplete,\r\n      onClickAutocomplete,\r\n      onKeyDownAutocomplete,\r\n      onSubmitAutocomplete,\r\n      state\r\n    } = this;\r\n    const { dataCity, isLoading } = state;\r\n    return (\r\n      <div className={styled.wrapper}>\r\n        <Header/>\r\n        <Autocomplete\r\n          onChange={onChangeAutocomplete}\r\n          onClick={onClickAutocomplete}\r\n          onKeyDown={onKeyDownAutocomplete}\r\n          onSubmit={onSubmitAutocomplete}\r\n          data={state}\r\n        />\r\n        {isLoading ? <Loader/> : dataCity.length ? <List cities={dataCity}/> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}